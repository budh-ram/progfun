- Finding gcd of two numbers

    cal_gcd a b
      | b == 0 = a
      | otherwise = cal_gcd b (mod a b)

- Calculating square root using Newton's Method:
  cal_sqrt delta x = iter x initial_guess
    where
      iter x y
        | good_enough x y = y
        | otherwise = iter x (next_guess y)
      initial_guess = x / 2.0
      good_enough y = abs (y^2 - x) < delta
      next_guess y = (y + x/y) / 2.0

  cal_sqrt1 = cal_sqrt 0.001

- Extracting patterns

-- Pattern :

till pred next value
  | pred value = value
  | otherwise = till pred next (next value)

-- Smallest Integer:
sm_sq limit = till (\x -> (x^2) > limit) (\x -> x + 1) 1

-- Square Root:
mysqrt delta x = till (\y -> abs (y^2 -x) < delta) (\y -> (y + x/y) / 2.0) (x / 2.0)

- lib/pusimple to find  all implementations

- Assignemnts: Implement following in any of your favourite languge.
1. Factorial - Recursive and iterativeâ€‹
2. Multiplication using addition - iterative and recursive
3. gcd using Euler's equation
4. Square root by Newton's successive approximation method

Note: Try to implement these like you do in gofer i.e. without modifying the value of
any variable (you can assign to it once). Note the difficulties you face.
Is it possible to implement some of these without (re)assignment?
If not, what is the minimum assignment you need to do to implement the above?